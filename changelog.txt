--- Saturday 2012-06-30 ---
* Made the new debug function produce more data, like caller info and line nr
* We've got non-fluid objects back, but there are certain artefacts popping up
  here and there. And the head gets cut off sometimes:
  need to add sector padding!
* Artefacts have been fixed! The getSector function always supplied the coord
  back it was given, but that could have been from INSIDE the sector, so it was
  wrong. Now we have a function that'll give you a sector coord based on the
  sector number alone.

--- Friday 2012-06-29 ---
* Modified the drawGrid debug function, the sector lines are now drawn
  correctly and move along with the map.
* Because of the improved drawGrid function, some other hardcoded debug
  code may be removed.
* Plain shadows are drawn again.
* New debug log function, some fixes here and there

--- Thursday 2012-06-28 ---
* Sectors are now correctly drawn when moving, resulting in smooth motion.
* Started moving the drawAnimation function over to the new design

--- Wednesday 2012-06-27 ---
* Added inner sector coordinates to the coordinate functions
* Added new dirtyness functions, seems to be working.
* Added some extra debug functions, added sector dirtyness and cleaned it up a
  bit.
* Started a whole new mess by redesigning drawTile and drawTileSpecific
* Map-animations work again. Tiles that shouldn't be drawn aren't.

--- Tuesday 2012-06-26 ---
* The map is now rendered in the correct place, sectors work perfectly.
* Added some debug functions for displaying sectors in the debug canvas.
* Fixed autotiles.

--- Monday 2012-06-25 ---
* Mergin the old sector changes with the new ones in the sector branch

--- Monday 2011-12-05 ---
* A few modest changes. 

--- Sunday 2011-12-04 ---
* Objects are now drawn on a per-position basis. For every position we see if
  there is an object there and draw it BEFORE we draw anything else on that
  layer. Is probably a bit more resource intensive, would have to see what
  impact it has when lots of objects are on the map.

--- Saturday 2011-12-03 ---
* New cache layer is so complex it would take days to implement. We'll leave it
  as it is for the moment.
* You no longer have to (or can) supply the tilenumber for an animation's
  "nextframe", in stead you have to supply how much tiles further the next
  frame tile is. Makes it much easier.
* The drawing of animated tiles has been fixed.
* Fixed the moving sprites of an object, but still need to finetune the code.
* Setting walkable tiles in tiled happens with the "walkable" property in stead
  of the old "impenetrable" one. When set to 2 it means it's half-walkable.
  You can enter it from top to bottom on the y axis, or any way on the x axis,
  but only exit the same way out (so no top to bottom exit).
  This is nice for fences.
* We need to change the place objects are drawn. Now they're drawn on top of an
  entire layer, but for Z-axis problems we need it to follow the map.

--- Friday 2011-12-02 ---
* Decided to add a new cache layer, which fundamentally changes the way the map
  is drawn.

--- Wednesday 2011-11-30 ---
* Objects have been moved to the new layout. Still need to fix some things,
  like smooth scrolling.
* There: we still need to fix object directional sprite rendering, but so much
  code has changed a commit is really needed.

--- Tuesday 2011-11-29 ---
* Began moving the objects to the new code layout. Will be lots of work, nearly
  everything depends on our main object.

--- Monday 2011-11-28 ---
* The splitting of files continues: kiflea.load.js was added, where all the code
  regarding downloading and processing of tilesets, maps, ... resides.
* Progressed on the new getting of a tile(set). The new functions should improve
  the overal workflow and code readability a lot.
* Found out on jsperf.com: ~~ is faster than Math.floor()
* Made k.operations.renderLayer() a whole lot cleaner, thanks to the new tileset
  and coord functions.
* Still a few problems: some coord functions produce different results.
* The "out of bounds" tileset drawing has almost been completely fixed. Black
  space will now be drawn there, but there's still a problem while walking.

--- Sunday 2011-11-27 ---
* Fixed the loading of xml files without an .xml extension (possible thanks to
  jQuery >1.5, now at version 1.7.1)
* Added shadows, which are drawn above the user's walking layer, but under the
  users.
* Started to add new tileSet operations.

--- Saturday 2011-11-26 ---
* Continued cleaning up the code (adding things to the k namespace)
* Made it so the map offset calculation actually only happens when moving, it
  now also happens in the Canvas class (with the "dirty rectangles" code)

--- Thursday 2011-11-24 ---
* The word of the day: lexicographic order.
* Started thinking about caching certain things.
* One of them: coordination calculation. jsPerf tests showed it can boost
  efficiency by 800%, but I had drawing problems because of them. So I had to
  disable it again (at least for 2 out of 3 functions)
* Autotile caching. That's where the caching idea came from. Works fine:
  Fake fps went from 47-50 to 60-62 while walking.

--- Wednesday 2011-11-23 ---
* Autotiles (The big RPG Maker kind, anyway) have been fully implemented!
  There's a smaller type too, with only 4 basetiles in stead of 5, but it's not
  that urgent.
* Autotiles are even animated. (Autotile detection happens VERY low, right
  before the actual draw on the canvas in fact)
* Made a bit of a mess. The autotiles code needs lots of clean-up work.

--- Tuesday 2011-11-22 ---
* Did more research about the autotiles, and finally found the key, which is:
  [5,  7,  5,  7,  13, 1,  13, 15]
  [8,  6,  8,  6,  16, 2,  16, 14]
  [17, 19, 17, 19, 9,  3,  9,  11]
  [20, 18, 20, 18, 12, 4,  12, 10]

--- Monday 2011-11-21 ---
* Finally fixed "off-line" processing of walkable tiles. (This now gets done
  after the last tileset image has been loaded.) This will also happen for
  on-line clients, but it will have no effect on them.
* Moved the drawing of the debug grid from the renderFrame to the canvas (will
  now happen after a flush)
* Moved the canvas class to its own file (kiflea.canvas.js)
  It was getting too big.
* Moved FPS-measuring to the Canvas class, and improved it:
  FPS data are now calculated mean averages.
* Improvements to the dirty rectangles code.
* Found a bug (that still needs fixing): all objects on the current map are
  drawn, no matter where they are. That needs to be fixed.
* Fixed the echo functions. innerHTML is not passed by reference. Stupid mistake
* Started very early work of the autotile feature: added a new tileset and
  places a few tiles on the grassland map.

--- Sunday 2011-11-20 ---
* Fixed a bug where the walkable tiles would be processed on every redraw.
  This fixed the jittery movement while walking.
* setInterval is back! Combine setInterval and requestAnimationFrame
  in order to get a desired fps. Now evveryone is happy.
  (Reason: we don't want 60 fps for our game. It flips out some stuff, like
  walking around. 25 is more than enough)
* Began implementation of dirty rectangles, which greatly improves execution
  speed already. Still need to work out some bugs, though.
  - It affects animations. They currently only work while moving. Solution is to
    set an animated tile as *always* dirty, for its entire width.
  - It affects server connections for some reason... Users are unable to move if
    someone else logs off or logs on.
* Created a "drawFades" function, which will draw a translucent color over tiles
  that have been dirty.
* Found out the hard way: chrome's console.log() is ASYNCHRONOUS.
* The dirty rectangles still need lots of work for moving objects!
* Began work on restoring the off-line operation.

--- Saturday 2011-11-19 ---
* Cleaned up the code a bit more
* Created an "oldcode" file, where some snippets can go that aren't currently
  in use, but may be used later on.
* Added simple loading screens
* Engine demo: Made the user start in the correct place (so no more starting in
  pure white space)

--- Wednesday 2011-09-21 ---
* Clean up the sercon file, modify functions and add them to the namespace.
* Added a "types" file, which is useful for development.
* Removed dialog code from keyboard file.

--- Tuesday 2011-09-20 ---
* Added a shim javascript file. It takes care of fallback functions (like
  websockets, requestAnimationFrame, ...)

--- Saturday 2011-09-17 ---
* Huge changes to the server, mostly due to the new websocket protocol (another
  one) Lots of new code was worked into the server. Code cleanup is also busy.

--- Friday 2011-09-16 ---
* Committed lots of previous changes
* I have previously decided to split Kiflea and its Hud (called Duk), now I'm
  also deciding to *continue* Kiflea without waiting for Duk to be finished.
  We'll use plain old HTML+CSS for the interface.
  At least this way our viewscreen stays clear.

--- Friday 2011-01-14 ---
I've started the year by deciding to restructure the entire engine.
I've done quite a lot of recoding from scratch and though I'm far from finished,
I thought it would be a good idea to do a commit right now. The code works, a
connection with the server can be made and we now have transparant dialog boxes!

--- Tuesday 2010/12/28 ---
(And the past week in general)
* Started getting serious about the server, rethinking how updates would be sent
  from client and such.
* Named the server "kiser"
* The code is terrible and will change a lot, but it's still something and nice
  to add to the repository for historical purposes
* Thinking about changing lots of things in the client. It does pathfinding and
  such very well, but they actually belong on the server for this kind of game.
  Though it's still nice to have for off-line games.

--- Saturday 2010/08/14 ---
* Started making another map, for the redditgamejam. This has already solved
  a few bugs.
* "Negative" maps aren't drawn anymore. The engine used to draw the map when there
  was a negative x,y coördinate (or one higher than the current mapwidth/height)
* Added map properties, now only used for the backgroundcolor of the map.
* Removed pieces of the old walkPath/slideMovingObject code
* Renamed transport to teleport.
* Created a basic function that does events. Teleports now actually work in game.
* Every object was drawn on every map, no matter where they were. Added a tiny
  if that takes care of that.
* Modifying the text output, it's still needed for regular off-line games.
  Renaming the showText function to queueText
* When using the same tileset in 2 different maps, the last loaded map will overwrite
  the tileset properties set in that map. Need to think about a way to fix this.
* You're finally unable to walk out of the bounds of the map.
* Made events depend on eachother.

--- Friday 2010/08/13 ---
* Discovered the real reason for the strange walking behaviour, as it still wasn't
  fixed: 2 layers on the map had the "drawusers" property set. That's a big no-no
* Events on the map now get added to the "actionsreceived" array of the user
* Started work on dialog windows. This way dynamic sized dialog windows can be
  created.
* Using the redditgamejam as encouragement to work on the engine!

--- Thursday 2010/08/12 ---
* Instead of relying on the keypress event for the autorepeating arrows, we
  now simulate them using an onKeyDown and onKeyUp event.
* When continuously moving a "standing still" frame or 2 would still be drawn of
  the user. It wasn't noticeable at 200 fps, but it is at 20 fps. This has now
  been fixed.
* Drawing a cursor in the canvas. Yes: it does work. Drop drawCursor() at the end
  of renderloop and you'll see it, but it lags behind a bit. And it's probably
  better to just use a cur file and css.

--- Tuesday 2010/08/10 ---
* Started work on changes to the pathfinding/walking

--- Thursday 2010/07/29 ---
* Cleaning up the server-code a bit for the client commit.

Performance offline:
    - Firefox 4.0b1 Windows: 30ms = 31 fps (2.6 ghz dualcore 2 Gib mem)

--- Tuesday 2010/07/27 ---
* Most of my time is now going into the server (written in Python)
  I'll once again wait a while until its code is "good enough" for a first commit.
  I'll still commit changes to the client, but they'll be mostly for enabling
  on-line communications with the server.
* A new file has been created: kiflea.sercon.js, which deals with the connection
  to the server via websockets.
* There is a posibility to not use websockets, but it involves a hidden flash file.
  That would kind of defeat the purpose of this project.
  Anyway: the more code added to the engine, the slower it becomes on older browsers,
  which don't support websockets. So adding the flash option would enable people to
  play the game very slowly on older browsers.
* A basic server was set up. It sent an update to every user 25 times a second.
  A user sent an update as high as its framerate (so in chrome: 100 times a second)
  When ten "users" were online, the program took 53% of the CPU time , on my VPS.
  Bandwith speed was quite high, too.
* When it was scaled back to 5 updates per second sent from the server, and only
  an update sent to the server on every keypress, it dropped to 7-8% (1.3% memory out of 512 megs)
  When we doubled the ammount of users to 20, it jumped to 27%. These were all in view.
  When I moved them all out of view, so no screen had more than 2 characters, it dropped to 1-3% again.

--- Saturday 2010/07/24 ---
* Effects now function properly, allthough moving effest sometimes leave an object
  in the animatedTiles array. This is because when an effect changes direction, it
  kind of "orphans" the previous tile and nobody's left to delete it.

--- Friday 2010/07/23 ---
* Fixing the drawAnimated function and splitting it up a bit.
* We're currently using tileNumber and tileGid at the same time. That's confusing.
  tileNumber is the order of a tile on a tileset (so it always starts with 1),
  tileGid is the TOTAL order of the tile in the map (the .tmx.xml file).
  Maybe we should create a function that gets OR the tileSetName OR the mapname and
  always the tileGid, or something. Just thinking out loud.
* Success! An effect can now have an aftereffect, which will play once.
  You can also give any tile an "adjustx" and "adjusty" attribute, but it will
  only be used for effects (for now, objects will follow later)
  This is useful for tiles that are too big. They aren't places at the canter
  of a tile, but on top of it. With this adjustment you can have a big explosion
  at the center of your destination, as can be seen in the example.

--- Thursday 2010/07/22 ---

* Created a few functions that will determine where an object is (leftup, leftdown, ...)
  first get the angle with getAngle() and then get the text with getAngleDirection();
* Implemented these functions in drawing effects.
* Lost A LOT of time because the server was down for several hours.
* Tried implementing an "aftereffects" effect. when one effect is done, another
  can be specified. However, there's a small problem with the playcounter.
  I'll try to debug that tomorrow.

--- Wednesday 2010/07/21 ---

* Implemented pathwalking.
  Finding a path is very nice, it has to be walked, too!
  Clicking an unreachable path is still crashing the engine, though.
* Made the maps a bit trickier (more impenetrable tiles) to test pathfinding
  I've also deleted the fake npcs. They were just world-animated tiles.
* Changed slideMovingObjects a bit to handle unwalkable tiles better.
  An object (or the user himself) will now gracefully stop before an unwalkable
  tile.
* Removed some old animation code, that was the basis for the drawAnimatedTile.
* Since renderLoop() became way too big, a lot of its code have gotten their own
  functions. This makes everything much nicer to code.
* Had to fix the drawAnimated, as it was still handling everything as a
  world-animated tile (because I forgot to pass over the objectid, doh!)
* Started work on effects (like flying fireballs and whatnot)
  Thanks to drawAnimated() not a lot of work has to go into making them animated,
  I only need to predetermine what side they have to face. Since effects can go
  diagonally, that's gonna be a bit more tricky.

--- Tuesday 2010/07/20 ---

* Created a pathfinding function. It's quite easy to do, especially since we're
  tile-based. It's not the most efficient written function, but it gets the job
  done. Clicking from the center of the screen to anywhere on the visible screen
  takes only 1-2 ms on chrome. (Firefox 3.6.6 on Ubuntu takes about 10ms)
  If we're 100 tiles further we're talking about 89 ms on Chrome.
  That's quite a lot, but at least in the game I've planned such far
  distances won't need to be calculated. Much. (And then, once it's calculated
  it's there to use.)
  While I learned mostly from A* pathfinding tutorials, this is actually called
  "Dijkstra" pathfinding. This means it searches by expanding out into every
  direction equally. So basically, for every path in the right direction it also
  searches for one in the wrong direction. Maybe I'll add a few lines of code
  later on to adjust this. At least this way I know a path will be found.


--- Monday 2010/07/19 ---

* Moved the HUD functions into a new file.
* Removed yet another jQuery function used during load.
  jQuery should only be used to load JSON and XML files from now on.
* The fields in the JSON file can contain an object, which will then be calculated
  To clarify, this way you can calculate the width of an object (like a healthbar)
  based on the health of a user. There are only a few functions like this I created
  but they can always be expanded.
* Found out about passing objects "by reference" the hard way. Got a "deepCopy"
  function from someone on stackoverflow, so that I can copy an object. It simply
  iterates over the object and returns it. It's probably a waste of resources but
  for now it'll have to do.
* Implemented basic clicking events. You can move around the map and select objects
  If the object has a health, its health is also shown under yours. You can of
  course also select yourself.
* Created a function that determines wheter you've clicked a HUD element or not,
  and returns that layer.
* Created basic functions that respond to clicks on a hud layer.
  Clicking your own healthbar will atm increase your health. Hehe.

Performance:
    - Firefox 3.6.6 Windows: 35-37ms = 28-29 fps (Feels much snappier than on Ubuntu)
    - Firefox 3.6.6 Ubuntu Intel Pentium Dual CPU 2.0 Ghz: 73ms = 14 fps (but still quite playable!)

--- Sunday 2010/07/18 ---

* Created walkable tiles.
  A tile can have a "impenetrable" property. It doesn't matter on what layer you
  put it, that world-tile will then be impenetrable.
  (This way you can define certain tiles as "never walk through" or override it
  with a fake tile)
* Edited the map a bit
* Created basic events (talking to any object will output 'object found!')
* Moved the debug-fps to the canvas itself, not the html output.
  This looks much nicer. It also increases the framerate in Chrome, but decreases
  it in Firefox. Which isn't very logical.
* Implemented very basic events.
* Implemented very basic dialog, too. Every object says the same thing, right now.

Performance before debugging, after walkable tiles (same as friday):
    - Google Chrome Ubuntu: 9-11ms = 111 fps
    - Firefox 3.6.6 Ubuntu: 35-40ms = 25 fps
    - Firefox 4.0b1 Ubuntu: 30-37ms = 25-29 fps
    
* Fixed a bug in the loading of walkable tiles. It used to take +/- 400ms,
  now "only" 60-90ms. The cause was an undefined variable at times slowing things down.
* Removed another jQuery 'each' function in the renderloop code. Doesn't really
  speed things up as it only had to cycle 6 or 7 items, but still.
* Can't really say much for performance after only 2 edits. Chrome is now leaning
  towards 9ms much more.
* We now have a basic HUD system, done in 2 hours time. The notation is done in
  a JSON file, not XML. It's very easy.
* Sometimes walkable tiles won't work, and you can walk on anything. I believe
  this could be a race condition, as it sometimes-does and sometimes-does-not work.

--- Saturday 2010/07/17 ---

* Fixed a bug that would cause multiple map-loadings to be stored under the same
  name. This didn't pop-up before because I only loaded one map, but as soon as
  I had 2 they would both be stored under the name of the last map. This was
  because the script was downloading the maps asynchronously and eventually
  passing the wrong name to the success function.
* Started work on object-animated tiles!
  - Objects can be layered. This will enable "clothes" for users.
  - Our own user is now an object. It's treated like anyone else.
  - Currently ALL the objects in the animatedObjects array are drawn.
    This is no problem is we only get the objects we need to draw from the
    game server, but for offline games this could cause a slowdown.
* Replaced a silly jQuery loop with simple javascript (which was just as long, really)
  This gave a few more frames per second on Firefox.
* Fixed drawTileSpecific, which wasn't as specific as it should be because it still
  looked at the current map the user is on. It's purpose is actually to draw a specific
  tile of a specific tileset to specific coordinates on the canvas (although it
  still adjusts for tiled "start a tile at the bottom" thing)
* Objects are now animated while they move.
* Movement is now way more smooth. (The screen doesn't jump anymore after holding
  an arrow key down for too long). The animation is still a bit wonky, but that's
  a problem for much later.
* 2 hours of work has been spent on an awful logo. It'll have to do for now.

--- Friday 2010/07/16 ---

* Implement a debug grid (useful to see where the tiles are being rendered to)
  - The grid does not move. set debugGrid to true to enable it.
    debugGridX and debugGridY are the width and height of a single cell
* Fix the world-animated tiles.
  - Every time a tile was drawn it would count as a frame, but since there can
    be multiple instances of the same tile in a world this caused the framerate
    to to multiply to the ammount of those tiles in view (so if you saw a tile
    3 times, its framerate would have tripled.)
    This has now been fixed, but it seems to cause a slight jitter in FF

Performance:
    - Google Chrome Ubuntu: 9-11ms = 111 fps
    - Firefox 3.6.6 Ubuntu: 35-40ms = 25 fps
    - Firefox 4.0b1 Ubuntu: 30-37ms = 25-29 fps

--- Thursday 2010/07/15 --- 5 files in total: size = 38,4 Kilobytes

* Adding 2 files: kiflea.keyboard.js and kiflea.unpacking.js
  - kiflea.unpacking.js uses a simplified base64 decoding script
    (used to use a jQuery plugin for this)
  - kiflea.keyboard.js stores the onkey events,
    and a handy array filled with keycodes
* Loading of layer properties
* Loading of tile properties
* Loading of animated tiles!
* Drawing character on a specific layer
* Drawing various tilesizes
  32x32 tiles, 256x128 tiles, 32x46, ... can all be mixed together
  A 256x128 tile takes up only 1 32x32 tile on a 32x32 layer. The starting point
  is at the bottom left corner (Which is slightly annoying because <canvas>
  starts at the top left corner, but it's an easy fix)
* Drawing world-animated tiles:
  I plan on having 2 kinds of animated tiles: world-animated and object-animated
  - world-animated tiles run synchronously. So if you paste the same animated
    tile all over the map they will always show the same frame.
  - object-animated can be paused separately, even if they use the same tiles.
* Simple toggleEngine() function that enables or disables the engine.
* Lots of debug functions that are probably slowing things down a bit.
  - When you set the fps to something below 5 (When you set it at that, not
    when you only have 5 fps) you get the Low FPS debug output.
    Useful for stepping through rendering problems.
    
Performance:
    - Google Chrome Windows: 15-16ms = 67 fps (2.6 ghz dualcore 2 Gib mem)
    - Firefox 4.0b1 Windows: 19-20ms = 48-50 fps (2.6 ghz dualcore 2 Gib mem)
    - IE7 + excanvas: Epic fail. (2.6 ghz dualcore 2 Gib mem)
    - Opera 10 Windows: Used to work fine, but won't output anything. Fps: 91-100 (2.6 ghz dualcore 2 Gib mem)
    - Firefox 3.6.6 Ubuntu: 37-40ms = 20-25 fps (2,67ghz i7 Quadcore 6 Gib mem)
    - Firefox 4.0b1 Ubuntu: 29-30ms = 32 fps (2,67ghz i7 Quadcore 6 Gib mem)


--- Wednesday 2010/07/14 --- 3 files in total: size = 11,8 Kilobytes

* Separate into 3 files (kiflea.js, kiflea.misc.js, kiflea.rendering.js)
* Automatic processing of a map and his tilesets
* Struggling with base64 and gzipping
    - gzipping was ultimately abandoned since the server gzipped data anyway
      and unzipping in javascript (even though it didn't work properly) was slow.
    - base64 (used for the layout of the maps) had some issues because I was
      encoding values greater than 255. I luckily found the answer on the internet
* Started setting up an svn server to keep my progress in. Will only submit
  a version when I'm not totally ashamed of my code, though.
* Beginning of basic debugging functions
* Cleaning up of the index page
* Displaying the map!
* Changing the map as you move (but no character sprite, yet!)

Performance:
    - Google Chrome Windows: 4-5ms = 250-ish fps
    - Firefox 4.0b1 Windows: 9-10ms = 100-ish fps
    - IE7 + excanvas: Lol. 1 frame per eternity.
    - Opera 10 Windows: 12-13ms = 76-80-ish fps
      (Strange note: when Opera has focus it's 2ms faster. )

--- Tuesday 2010/07/13 --- 1 file in total

* First few lines were written!
* Loading of the canvas and rendering with fps settings
* Loading of the tileset by imagename and parameters
    (Manually specifying file, tiles-per-row (tpr), ...)
* Drawing of a tile on the canvas
* Drawing an animation (a complete tileset image) with fps settings


Besides the usual jQuery plugins I configured, I had never actually written
a something in javascript before. My knowledge of it was very basic.

Thanks to Mozilla's canvas tutorial I was quickly on my way to drawing spiffy
items to the canvas element, though!

I spent most of my time working on a few routines to get an animation going.
Then I dropped it 'till thursday, because the basics had to come first.
