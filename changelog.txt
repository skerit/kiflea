

--- thursday 2010/07/22 ---

* Created a few functions that will determine where an object is (leftup, leftdown, ...)
  first get the angle with getAngle() and then get the text with getAngleDirection();
* Implemented these functions in drawing effects.
* Lost A LOT of time because the server was down for several hours.
* Tried implementing an "aftereffects" effect. when one effect is done, another
  can be specified. However, there's a small problem with the playcounter.
  I'll try to debug that tomorrow.

--- Wednesday 2010/07/21 ---

* Implemented pathwalking.
  Finding a path is very nice, it has to be walked, too!
  Clicking an unreachable path is still crashing the engine, though.
* Made the maps a bit trickier (more impenetrable tiles) to test pathfinding
  I've also deleted the fake npcs. They were just world-animated tiles.
* Changed slideMovingObjects a bit to handle unwalkable tiles better.
  An object (or the user himself) will now gracefully stop before an unwalkable
  tile.
* Removed some old animation code, that was the basis for the drawAnimatedTile.
* Since renderLoop() became way too big, a lot of its code have gotten their own
  functions. This makes everything much nicer to code.
* Had to fix the drawAnimated, as it was still handling everything as a
  world-animated tile (because I forgot to pass over the objectid, doh!)
* Started work on effects (like flying fireballs and whatnot)
  Thanks to drawAnimated() not a lot of work has to go into making them animated,
  I only need to predetermine what side they have to face. Since effects can go
  diagonally, that's gonna be a bit more tricky.

--- Tuesday 2010/07/20 ---

* Created a pathfinding function. It's quite easy to do, especially since we're
  tile-based. It's not the most efficient written function, but it gets the job
  done. Clicking from the center of the screen to anywhere on the visible screen
  takes only 1-2 ms on chrome. (Firefox 3.6.6 on Ubuntu takes about 10ms)
  If we're 100 tiles further we're talking about 89 ms on Chrome.
  That's quite a lot, but at least in the game I've planned such far
  distances won't need to be calculated. Much. (And then, once it's calculated
  it's there to use.)
  While I learned mostly from A* pathfinding tutorials, this is actually called
  "Dijkstra" pathfinding. This means it searches by expanding out into every
  direction equally. So basically, for every path in the right direction it also
  searches for one in the wrong direction. Maybe I'll add a few lines of code
  later on to adjust this. At least this way I know a path will be found.


--- Monday 2010/07/19 ---

* Moved the HUD functions into a new file.
* Removed yet another jQuery function used during load.
  jQuery should only be used to load JSON and XML files from now on.
* The fields in the JSON file can contain an object, which will then be calculated
  To clarify, this way you can calculate the width of an object (like a healthbar)
  based on the health of a user. There are only a few functions like this I created
  but they can always be expanded.
* Found out about passing objects "by reference" the hard way. Got a "deepCopy"
  function from someone on stackoverflow, so that I can copy an object. It simply
  iterates over the object and returns it. It's probably a waste of resources but
  for now it'll have to do.
* Implemented basic clicking events. You can move around the map and select objects
  If the object has a health, its health is also shown under yours. You can of
  course also select yourself.
* Created a function that determines wheter you've clicked a HUD element or not,
  and returns that layer.
* Created basic functions that respond to clicks on a hud layer.
  Clicking your own healthbar will atm increase your health. Hehe.

Performance:
    - Firefox 3.6.6 Windows: 35-37ms = 28-29 fps (Feels much snappier than on Ubuntu)
    - Firefox 3.6.6 Ubuntu Intel Pentium Dual CPU 2.0 Ghz: 73ms = 14 fps (but still quite playable!)

--- Sunday 2010/07/18 ---

* Created walkable tiles.
  A tile can have a "impenetrable" property. It doesn't matter on what layer you
  put it, that world-tile will then be impenetrable.
  (This way you can define certain tiles as "never walk through" or override it
  with a fake tile)
* Edited the map a bit
* Created basic events (talking to any object will output 'object found!')
* Moved the debug-fps to the canvas itself, not the html output.
  This looks much nicer. It also increases the framerate in Chrome, but decreases
  it in Firefox. Which isn't very logical.
* Implemented very basic events.
* Implemented very basic dialog, too. Every object says the same thing, right now.

Performance before debugging, after walkable tiles (same as friday):
    - Google Chrome Ubuntu: 9-11ms = 111 fps
    - Firefox 3.6.6 Ubuntu: 35-40ms = 25 fps
    - Firefox 4.0b1 Ubuntu: 30-37ms = 25-29 fps
    
* Fixed a bug in the loading of walkable tiles. It used to take +/- 400ms,
  now "only" 60-90ms. The cause was an undefined variable at times slowing things down.
* Removed another jQuery 'each' function in the renderloop code. Doesn't really
  speed things up as it only had to cycle 6 or 7 items, but still.
* Can't really say much for performance after only 2 edits. Chrome is now leaning
  towards 9ms much more.
* We now have a basic HUD system, done in 2 hours time. The notation is done in
  a JSON file, not XML. It's very easy.
* Sometimes walkable tiles won't work, and you can walk on anything. I believe
  this could be a race condition, as it sometimes-does and sometimes-does-not work.

--- Saturday 2010/07/17 ---

* Fixed a bug that would cause multiple map-loadings to be stored under the same
  name. This didn't pop-up before because I only loaded one map, but as soon as
  I had 2 they would both be stored under the name of the last map. This was
  because the script was downloading the maps asynchronously and eventually
  passing the wrong name to the success function.
* Started work on object-animated tiles!
  - Objects can be layered. This will enable "clothes" for users.
  - Our own user is now an object. It's treated like anyone else.
  - Currently ALL the objects in the animatedObjects array are drawn.
    This is no problem is we only get the objects we need to draw from the
    game server, but for offline games this could cause a slowdown.
* Replaced a silly jQuery loop with simple javascript (which was just as long, really)
  This gave a few more frames per second on Firefox.
* Fixed drawTileSpecific, which wasn't as specific as it should be because it still
  looked at the current map the user is on. It's purpose is actually to draw a specific
  tile of a specific tileset to specific coordinates on the canvas (although it
  still adjusts for tiled "start a tile at the bottom" thing)
* Objects are now animated while they move.
* Movement is now way more smooth. (The screen doesn't jump anymore after holding
  an arrow key down for too long). The animation is still a bit wonky, but that's
  a problem for much later.
* 2 hours of work has been spent on an awful logo. It'll have to do for now.

--- Friday 2010/07/16 ---

* Implement a debug grid (useful to see where the tiles are being rendered to)
  - The grid does not move. set debugGrid to true to enable it.
    debugGridX and debugGridY are the width and height of a single cell
* Fix the world-animated tiles.
  - Every time a tile was drawn it would count as a frame, but since there can
    be multiple instances of the same tile in a world this caused the framerate
    to to multiply to the ammount of those tiles in view (so if you saw a tile
    3 times, its framerate would have tripled.)
    This has now been fixed, but it seems to cause a slight jitter in FF

Performance:
    - Google Chrome Ubuntu: 9-11ms = 111 fps
    - Firefox 3.6.6 Ubuntu: 35-40ms = 25 fps
    - Firefox 4.0b1 Ubuntu: 30-37ms = 25-29 fps

--- Thursday 2010/07/15 --- 5 files in total: size = 38,4 Kilobytes

* Adding 2 files: kiflea.keyboard.js and kiflea.unpacking.js
  - kiflea.unpacking.js uses a simplified base64 decoding script
    (used to use a jQuery plugin for this)
  - kiflea.keyboard.js stores the onkey events,
    and a handy array filled with keycodes
* Loading of layer properties
* Loading of tile properties
* Loading of animated tiles!
* Drawing character on a specific layer
* Drawing various tilesizes
  32x32 tiles, 256x128 tiles, 32x46, ... can all be mixed together
  A 256x128 tile takes up only 1 32x32 tile on a 32x32 layer. The starting point
  is at the bottom left corner (Which is slightly annoying because <canvas>
  starts at the top left corner, but it's an easy fix)
* Drawing world-animated tiles:
  I plan on having 2 kinds of animated tiles: world-animated and object-animated
  - world-animated tiles run synchronously. So if you paste the same animated
    tile all over the map they will always show the same frame.
  - object-animated can be paused separately, even if they use the same tiles.
* Simple toggleEngine() function that enables or disables the engine.
* Lots of debug functions that are probably slowing things down a bit.
  - When you set the fps to something below 5 (When you set it at that, not
    when you only have 5 fps) you get the Low FPS debug output.
    Useful for stepping through rendering problems.
    
Performance:
    - Google Chrome Windows: 15-16ms = 67 fps (2.6 ghz dualcore 2 Gib mem)
    - Firefox 4.0b1 Windows: 19-20ms = 48-50 fps (2.6 ghz dualcore 2 Gib mem)
    - IE7 + excanvas: Epic fail. (2.6 ghz dualcore 2 Gib mem)
    - Opera 10 Windows: Used to work fine, but won't output anything. Fps: 91-100 (2.6 ghz dualcore 2 Gib mem)
    - Firefox 3.6.6 Ubuntu: 37-40ms = 20-25 fps (2,67ghz i7 Quadcore 6 Gib mem)
    - Firefox 4.0b1 Ubuntu: 29-30ms = 32 fps (2,67ghz i7 Quadcore 6 Gib mem)


--- Wednesday 2010/07/14 --- 3 files in total: size = 11,8 Kilobytes

* Separate into 3 files (kiflea.js, kiflea.misc.js, kiflea.rendering.js)
* Automatic processing of a map and his tilesets
* Struggling with base64 and gzipping
    - gzipping was ultimately abandoned since the server gzipped data anyway
      and unzipping in javascript (even though it didn't work properly) was slow.
    - base64 (used for the layout of the maps) had some issues because I was
      encoding values greater than 255. I luckily found the answer on the internet
* Started setting up an svn server to keep my progress in. Will only submit
  a version when I'm not totally ashamed of my code, though.
* Beginning of basic debugging functions
* Cleaning up of the index page
* Displaying the map!
* Changing the map as you move (but no character sprite, yet!)

Performance:
    - Google Chrome Windows: 4-5ms = 250-ish fps
    - Firefox 4.0b1 Windows: 9-10ms = 100-ish fps
    - IE7 + excanvas: Lol. 1 frame per eternity.
    - Opera 10 Windows: 12-13ms = 76-80-ish fps
      (Strange note: when Opera has focus it's 2ms faster. )

--- Tuesday 2010/07/13 --- 1 file in total

* First few lines were written!
* Loading of the canvas and rendering with fps settings
* Loading of the tileset by imagename and parameters
    (Manually specifying file, tiles-per-row (tpr), ...)
* Drawing of a tile on the canvas
* Drawing an animation (a complete tileset image) with fps settings


Besides the usual jQuery plugins I configured, I had never actually written
a something in javascript before. My knowledge of it was very basic.

Thanks to Mozilla's canvas tutorial I was quickly on my way to drawing spiffy
items to the canvas element, though!

I spent most of my time working on a few routines to get an animation going.
Then I dropped it 'till thursday, because the basics had to come first.
